@page "/"
@rendermode InteractiveServer
@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using Newtonsoft.Json
@inject OpenAIService ChatGptService
@using PivotTableAI.Components.Data

<div class="pivot-toast">
    <SfToast ID="toast_default" @ref="ToastObj" Title="Server Busy" Content="@ToastContent" Timeout="5000" Icon="e-meeting">
        <ToastPosition X="@ToastPosition"></ToastPosition>
    </SfToast>
</div>

<SfDialog Target="#PivotView" @ref="Dialog" CssClass="AI-dialog" MinHeight="200px" Height="300px" ShowCloseIcon="true" @bind-Visible="@Visibility">
    <DialogTemplates>
        <Header> AI Assist </Header>
        <Content>
            <p class="category-title">Predictive Analytics Query:</p>
            <div class="inline">
                <span id="contentText" class="dropdown-size">
                    Provide future data points up to the year
                    <SfDropDownList TValue="string" TItem="Data" CssClass="inlinecss" Placeholder="Select a Year" DataSource="@InlineYears" @bind-Value="@TextValue" Width="45px" PopupHeight="200px" PopupWidth="140px">
                        <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                    along with the existing data.
                </span>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton IsPrimary="true" Content="Submit" OnClick="@OnBtnClick" />
    </DialogButtons>
</SfDialog>

<SfPivotView ID="PivotView" @ref="pivotRef" TValue="PivotProductDetails" Width="1200" Height="500" ShowFieldList="true" ShowToolbar="true" AllowConditionalFormatting="true" AllowPdfExport="true" AllowExcelExport="true" Toolbar="@toolbar">
    <PivotViewTemplates>
        <CellTemplate>
            @{
                var data = (context as AxisSet);
                if (data != null)
                {
                    if ((data.Axis == "value" || (data.Axis == "value" && data.ColumnHeaders.ToString() == "Grand Total")) && !(data.RowHeaders as string).Contains('.') && predictivePoints.Contains(data.ColumnHeaders.ToString()))
                    {
                        pivotRef.PivotValues[data.RowIndex][data.ColIndex].CssClass = "e-custom-class";
                        @data.FormattedText
                    }
                    else
                    {
                        @data.FormattedText
                    }
                }
            }
        </CellTemplate>
    </PivotViewTemplates>
    <PivotViewDataSourceSettings DataSource="@data">
        <PivotViewColumns>
            <PivotViewColumn Name="Year"></PivotViewColumn>
        </PivotViewColumns>
        <PivotViewRows>
            <PivotViewRow Name="Products"></PivotViewRow>
        </PivotViewRows>
        <PivotViewValues>
            <PivotViewValue Name="Sold"></PivotViewValue>
            <PivotViewValue Name="Amount"></PivotViewValue>
        </PivotViewValues>
    </PivotViewDataSourceSettings>
    <PivotViewEvents TValue="PivotProductDetails" ToolbarRendered="ToolbarRender"></PivotViewEvents>
</SfPivotView>
<SfSpinner @ref="@spinnerObj"></SfSpinner>

<style>
    .e-custom-class {
        background-color: yellow !important;
    }

    .category-title {
        font-weight: bold;
        margin-top: 10px;
    }

    .AI-dialog {
        max-height: 300px !important;
        max-width: 500px !important;
    }

    .inlinecss.e-ddl .e-input-group-icon.e-ddl-icon {
        display: none;
    }

    .inlinecss.e-ddl .e-control.e-dropdownlist.e-input {
        font-size: 16px;
        font-weight: 500;
        margin: -7px 0px 0px 0px;
        padding: 0px;
    }

    #contentText .e-input-group.e-control-wrapper.e-ddl::before,
    #contentText .e-input-group.e-control-wrapper.e-ddl::after {
        content: none;
    }

    #contentText .e-input-group.e-control-wrapper.e-ddl,
    #contentText .e-input-group.e-control-wrapper.e-ddl:hover,
    #contentText .e-input-group.e-ddl.e-input-focus,
    #contentText .e-input-group.e-ddl.e-input-focus::before,
    #contentText .e-input-group.e-ddl.e-input-focus::after {
        border-width: 0px;
        border: none;
        border-bottom: 1px dashed black;
        box-shadow: none;
    }

    .e-toolbar-item.e-separator {
        border: 1px solid #000000 !important
    }
</style>

@code {
    private string[] ChoiceSelected = { "Predictive Analytics & Modeling" };
    private List<string> predictivePoints = new List<string>()
    {
        "FY 2025", "FY 2026", "FY 2027", "FY 2028", "FY 2029"
    };
    public string TextValue { get; set; } = "2025";
    public class Data
    {
        public string Name { get; set; }
        public string ID { get; set; }
    }
    List<Data> InlineYears = new List<Data>
    {
        new Data() { Name = "2025", ID = "1" },
        new Data() { Name = "2026", ID = "2" },
        new Data() { Name = "2027", ID = "3" },
        new Data() { Name = "2028", ID = "4" },
        new Data() { Name = "2029", ID = "5" },
    };

    SfToast ToastObj;
    private string ToastPosition = "Right";
    private string ToastContent = "Server is busy right now, Please try again";
    private SfSpinner spinnerObj;
    private string Description = string.Empty;
    private SfDialog Dialog { get; set; }
    private bool Visibility { get; set; } = false;
    private SfPivotView<PivotProductDetails> pivotRef;
    public List<PivotProductDetails> data { get; set; }
    public List<PivotProductDetails> cloneDataSource { get; set; }

    public class PivotReport
    {
        public List<PivotProductDetails> DataSource { get; set; }
        public List<PivotViewColumn> Columns { get; set; }
        public List<PivotViewRow> Rows { get; set; }
        public List<PivotViewValue> Values { get; set; }
    }

    public List<Syncfusion.Blazor.PivotView.ToolbarItems> toolbar = new List<Syncfusion.Blazor.PivotView.ToolbarItems> {
        Syncfusion.Blazor.PivotView.ToolbarItems.FieldList,
    };

    protected override void OnInitialized()
    {
        this.cloneDataSource = PivotProductDetails.GetProductData().ToList();
        this.data = new List<PivotProductDetails>(cloneDataSource);
    }


    public void ToolbarRender(ToolbarArgs args)
    {
        args.CustomToolbar.Add(new ItemModel
            {
                Text = "AI Assist",
                TooltipText = "AI Assist",
                Click = EventCallback.Factory.Create<ClickEventArgs>(this, OpenDialog),
            });
    }

    public async void OpenDialog(ClickEventArgs args)
    {
        await Dialog.ShowAsync();
    }

    private async Task OnBtnClick()
    {
        await Dialog.HideAsync();
        Description = $"Provide future data points up to the year {TextValue} along with the existing data from the provided data source";
        if (!string.IsNullOrEmpty(Description))
        {
            await spinnerObj.ShowAsync();
            PivotReport pivot = new PivotReport()
                {
                    DataSource = data,
                    Columns = pivotRef.DataSourceSettings.Columns,
                    Rows = pivotRef.DataSourceSettings.Rows,
                    Values = pivotRef.DataSourceSettings.Values,
                };
            var pivotReportJson = GetSerializedPivotReport(pivot);

            // Refined prompt for incremental forecasting
            string prompt = $"Given the following datasource and settings (such as rows, columns, values, and filters) bound in the pivot table:\n\n{pivotReportJson}\n\n" +
                           $"The datasource contains historical data and may include previously forecasted data for future years (e.g., FY 2025, FY 2026). Your task is to:\n" +
                           $"1. Preserve all existing data, including historical data (e.g., FY 2023, FY 2024) and any previously forecasted data for years up to {TextValue}.\n" +
                           $"2. Forecast data only for the year {TextValue} if it does not already exist in the datasource. Do not modify existing years.\n" +
                           $"3. If {TextValue} already exists, do not forecast for that year or any later years.\n" +
                           $"4. Generate meaningful forecasted values based on trends in the historical data (e.g., FY 2023, FY 2024). Do not return zeros unless the trend justifies it.\n" +
                           $"5. Ensure the forecasted 'Sold' and 'Amount' values are realistic and follow the patterns in the historical data (e.g., growth or decline trends).\n" +
                           $"Return the updated datasource and settings in JSON format only, without any additional information or content in the response.";

            var result = await ChatGptService.GetResponseFromAzureOpenAI(prompt);
            if (result != null)
            {
                try
                {
#pragma warning disable BL0005
                    PivotReport deserializeResult = DeserializeResult(result);
                    this.data = deserializeResult.DataSource ?? data;
                    pivotRef.DataSourceSettings.Rows = deserializeResult.Rows;
                    pivotRef.DataSourceSettings.Columns = deserializeResult.Columns;
                    pivotRef.DataSourceSettings.Values = deserializeResult.Values;
#pragma warning restore BL0005
                }
                catch (Exception ex)
                {
                    await this.ToastObj.ShowAsync();
                }
            }
            await spinnerObj.HideAsync();
        }
        else
        {
            this.data = cloneDataSource;
        }
    }

    private string GetSerializedPivotReport(PivotReport report)
    {
        return JsonConvert.SerializeObject(report);
    }

    private PivotReport DeserializeResult(string result)
    {
        result = result.Replace("```json", "").Replace("```", "").Trim();
        return JsonConvert.DeserializeObject<PivotReport>(result);
    }
}